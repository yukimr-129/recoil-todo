{"version":3,"sources":["components/TodoAppHeader.tsx","atoms/RegisterDialogContent.tsx","atoms/TasksList.tsx","components/RegisterDialogContent.tsx","components/RegisterDialog.tsx","components/TodoTable.tsx","components/TodoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","title","display","breakpoints","up","TodoAppHeader","classes","className","AppBar","position","Toolbar","Typography","variant","noWrap","taskContentState","atom","key","default","taskDeadlineState","Date","taskPriorityState","TasksList","RegisterDialogContent","useRecoilState","setContent","deadline","setDeadline","priority","setPriority","utils","DateFnsUtils","DialogContent","DialogContentText","Grid","container","spacing","direction","item","TextField","onChange","e","target","value","margin","id","label","fullWidth","disableToolbar","format","minDate","date","handleDeadlineChange","invalidDateMessage","minDateMessage","xs","Slider","newValue","defaultValue","aria-valuetext","aria-labelledby","valueLabelDisplay","step","marks","min","max","Input","Number","onBlur","inputProps","type","RegisterDialog","props","open","onClose","taskContent","useRecoilValue","taskDeadline","taskPriority","tasks","setTasks","Dialog","DialogTitle","DialogActions","Button","onClick","color","content","TodoTable","useState","selected","setSelected","order","setOrder","orderBy","setOrderBy","handleSort","sortBy","newOrder","arr","sort","a","b","sortTasks","concat","IconButton","newTasks","filter","task","i","indexOf","disabled","length","aria-label","TableContainer","Table","TableHead","TableRow","TableCell","padding","Checkbox","checked","Array","keys","align","TableSortLabel","active","TableBody","map","index","selectedIndex","newSelected","slice","handleCheck","button","backgroundColor","fab","bottom","right","TodoList","setOpen","handleOpen","Box","textAlign","Fab","gutterBottom","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64662f84.chunk.js","sourcesContent":["import { AppBar, createStyles, fade, InputBase, makeStyles, Theme, Toolbar, Typography } from \"@material-ui/core\"\nimport SearchIcon from '@material-ui/icons/Search';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport IconButton from '@material-ui/core/IconButton';\nimport { VFC } from \"react\";\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    title: {\n      flexGrow: 1,\n      display: 'none',\n      [theme.breakpoints.up('sm')]: {\n        display: 'block',\n      },\n    },\n  }),\n);\n\nexport const TodoAppHeader: VFC = () => {\n    const classes = useStyles();\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography className={classes.title} variant=\"h6\" noWrap>\n                        Task Manager\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n        </div>\n    )\n}","import { atom } from \"recoil\";\n\nexport const taskContentState = atom<string>({\n    key: 'taskContentState',\n    default: ''\n})\n\nexport const taskDeadlineState = atom<Date>({\n    key: 'taskDeadlineState',\n    default: new Date()\n})\n\nexport const taskPriorityState = atom<number>({\n    key: 'taskPriorityState',\n    default: 1\n})","import { atom } from \"recoil\";\n\nexport type Tasks = {\n    content: string;\n    deadline: any;\n    priority: number;\n}\n\nexport const TasksList = atom<Array<Tasks>>({\n    key: 'TasksList',\n    default: []\n})","import { ChangeEvent, VFC } from \"react\"\n\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Slider from '@material-ui/core/Slider';\nimport Input from '@material-ui/core/Input';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker\n} from '@material-ui/pickers';\n\nimport { useRecoilState } from \"recoil\";\nimport { taskContentState, taskDeadlineState, taskPriorityState } from \"../atoms/RegisterDialogContent\";\n\n\nexport const RegisterDialogContent: VFC = () => {\n    const [content, setContent] = useRecoilState(taskContentState)\n    const [deadline, setDeadline] = useRecoilState(taskDeadlineState)\n    const [priority, setPriority] = useRecoilState(taskPriorityState)\n\n    // タスクの内容が変更\n    const handleContentChange = (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        setContent(e.target.value)\n    }\n\n    // タスクの期限が変更\n    const handleDeadlineChange = (date: any) => {\n        setDeadline(date)\n    }\n\n    // スライダーが動かされたとき\n    const handleSliderChange = (e: ChangeEvent<{}>, newValue: any) => {\n        setPriority(newValue)\n    }\n\n    //スライダー横の数値入力欄が変更\n    const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setPriority(Number(e.target.value))\n    }\n\n    // 数値入力欄で１～５以外の数値を指定\n    const handleBlur = () => {\n        if (priority < 1) {\n            setPriority(1);\n        } else if (priority > 5) {\n            setPriority(5);\n        }\n    }\n\n    return (\n        <>\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                <DialogContent>\n                    <DialogContentText>\n                    登録するタスクの情報を入力してください。\n                    </DialogContentText>\n                    <Grid container spacing={6} direction=\"column\">\n                        <Grid item>\n                            <TextField\n                            onChange={handleContentChange}\n                            margin=\"dense\"\n                            id=\"name\"\n                            label=\"内容\"\n                            fullWidth  \n                            />\n                            <KeyboardDatePicker\n                            disableToolbar\n                            variant=\"inline\"          \n                            format=\"yyyy/MM/dd\"       \n                            minDate={new Date()}      \n                            margin=\"normal\"\n                            id=\"date-picker-inline\"\n                            label=\"期限\"\n                            value={deadline}\n                            onChange={date => handleDeadlineChange(date)}\n                            invalidDateMessage=\"無効な形式です\"\n                            minDateMessage=\"昨日以前の日付を指定することはできません\"\n                            />\n                        </Grid>\n                        <Grid container item spacing={2}>\n                            <Grid item xs={2}>\n                                <DialogContentText>優先度</DialogContentText>\n                            </Grid>\n                            <Grid item xs={8}>\n                                <Slider\n                                    value={priority}\n                                    onChange={handleSliderChange}\n                                    defaultValue={1}        \n                                    aria-valuetext=\"\"\n                                    aria-labelledby=\"discrete-slider\"\n                                    valueLabelDisplay=\"on\"  \n                                    step={1}  \n                                    marks     \n                                    min={1}   \n                                    max={5}   \n                                />\n                            </Grid>\n                            <Grid item xs={2}>\n                                <Input\n                                    value={priority}\n                                    margin=\"dense\"\n                                    onChange={handleInputChange}\n                                    onBlur={handleBlur}\n                                    inputProps={{\n                                    step: 1,\n                                    min: 1,\n                                    max: 5,\n                                    type: 'number',\n                                    'aria-labelledby': 'input-slider'\n                                    }}\n                                />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n            </MuiPickersUtilsProvider>\n        </>\n    )\n}","import React, { VFC } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport { useRecoilValue } from 'recoil';\nimport { useRecoilState } from 'recoil';\n\nimport { taskContentState, taskDeadlineState, taskPriorityState } from '../atoms/RegisterDialogContent';\nimport { TasksList } from '../atoms/TasksList';\nimport { RegisterDialogContent } from './RegisterDialogContent';\n\ntype Props = {\n    open: boolean;\n    onClose: () => void;\n}\n\nexport const RegisterDialog: VFC<Props> = (props) => {\n    const { open, onClose } = props\n\n    const taskContent = useRecoilValue(taskContentState)\n    const taskDeadline = useRecoilValue(taskDeadlineState)\n    const taskPriority = useRecoilValue(taskPriorityState)\n\n    const [tasks, setTasks] = useRecoilState(TasksList)\n\n    //タスク登録\n    const handleRegister = () => {\n        setTasks([\n            ...tasks,\n            {\n                content: taskContent,\n                deadline: taskDeadline,\n                priority: taskPriority\n            }\n        ])\n        onClose()\n    }\n\n\n\n\n    return (\n        <Dialog \n         open={open}\n         onClose={onClose}\n         aria-labelledby=\"form-dialog-title\"\n         fullWidth\n        >\n            <DialogTitle>タスク登録</DialogTitle>\n            <RegisterDialogContent />\n            <DialogActions>\n                <Button onClick={onClose} color=\"primary\">\n                    もどる\n                </Button>\n                <Button onClick={handleRegister} color=\"primary\">\n                    登録\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}","import { useRecoilState } from 'recoil';\n\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport { format } from 'date-fns';\nimport { Checkbox, IconButton, TableSortLabel } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport { TasksList, Tasks } from '../atoms/TasksList';\nimport { ChangeEvent, useState } from 'react';\n\nconst sortTasks = (\n    arr: { content: string; deadline: any; priority: number }[],\n    sortBy: 'deadline' | 'priority',\n    order: 'asc' | 'desc'\n  ) =>\n    arr.sort(\n      (\n        a: { content: string; deadline: any; priority: number },\n        b: { content: string; deadline: any; priority: number }\n      ) => (order === 'asc' ? a[sortBy] - b[sortBy] : b[sortBy] - a[sortBy])\n);\n\nexport const TodoTable = () => {\n    const [tasks, setTasks] = useRecoilState(TasksList)\n\n    const [selected, setSelected] = useState<Array<number>>([])\n    const [order, setOrder] = useState<'asc' | 'desc'>('asc')\n    const [orderBy, setOrderBy] = useState<'deadline' | 'priority' | ''>('');\n\n\n\n    // すべてのタスクを選択する\n    const handleSelectAll = (e: ChangeEvent<HTMLInputElement>) => {\n        if(e.target.checked) {\n            setSelected([...Array(tasks.length).keys()]);\n            return;\n        }\n        setSelected([])\n    }\n\n    // 特定のタスクを選択する\n    const handleCheck = (e: ChangeEvent<HTMLInputElement>, i: number) => {\n        const selectedIndex = selected.indexOf(i)\n        let newSelected: Array<number> = []\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, i);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(\n              selected.slice(0, selectedIndex),\n              selected.slice(selectedIndex + 1)\n            );\n        }\n      \n        setSelected(newSelected);\n    }\n\n    //タスク削除\n    const handleDelete = () => {\n        let newTasks = tasks.filter((task: Tasks, i: number) => {\n            return selected.indexOf(i) === -1\n        })\n        setTasks(newTasks)\n        setSelected([])\n    }\n\n    //並び替え\n    const handleSort = (sortBy: 'deadline' | 'priority') => (\n        e: React.MouseEvent\n      ) => {\n        let newOrder: 'asc' | 'desc' =\n          orderBy === sortBy ? (order === 'asc' ? 'desc' : 'asc') : 'asc';\n        setOrderBy(sortBy);\n        setOrder(newOrder);\n        setTasks(sortTasks(tasks.concat(), sortBy, newOrder));\n    }\n\n\n\n    return (\n        <>\n        <IconButton \n            onClick={handleDelete}\n            disabled={selected.length === 0}\n            aria-label=\"delete\"\n        >\n            <DeleteIcon />\n        </IconButton>\n        <TableContainer>\n            <Table>\n                <TableHead>\n                <TableRow>\n                    <TableCell padding=\"checkbox\">\n                        <Checkbox\n                        checked={tasks.length > 0 && tasks.length === selected.length}\n                        onChange={handleSelectAll}\n                        />\n                    </TableCell>\n                    <TableCell>タスク</TableCell>\n                    <TableCell align=\"center\">\n                        <TableSortLabel\n                        active={orderBy === 'deadline'}\n                        direction={order === 'asc' ? 'desc' : 'asc'}\n                        onClick={handleSort('deadline')}\n                        >\n                            期日\n                        </TableSortLabel>\n                    </TableCell>\n                    <TableCell align=\"center\">\n                        <TableSortLabel\n                        active={orderBy === 'priority'}\n                        direction={order === 'asc' ? 'desc' : 'asc'}\n                        onClick={handleSort('priority')}\n                        >\n                            優先度\n                        </TableSortLabel>\n                    </TableCell>\n                </TableRow>\n                </TableHead>\n                <TableBody>\n                {tasks.map((task: any, index: number) => (\n                    <TableRow key={index}>\n                        <TableCell padding=\"checkbox\">\n                        <Checkbox\n                            checked={selected.indexOf(index) !== -1}\n                            onChange={(e: any) => handleCheck(e, index)}\n                        />\n                        </TableCell>\n                        <TableCell>{task.content}</TableCell>\n                        <TableCell align=\"center\">\n                            {format(task.deadline, 'yyyy/MM/dd')}\n                        </TableCell>\n                        <TableCell align=\"center\">{task.priority}</TableCell>\n                    </TableRow>\n                ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n        </>\n    )\n}","import { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport { useState, VFC } from 'react';\nimport { RegisterDialog } from './RegisterDialog';\nimport { useRecoilValue } from 'recoil';\nimport { TasksList } from '../atoms/TasksList';\nimport { TodoTable } from './TodoTable';\nimport { Fab } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add'\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    button: {\n      '&:hover': {\n        backgroundColor: '#6666ff'\n      }\n    },\n    fab: {\n        position: 'absolute',\n        bottom: '2rem',\n        right: '2rem',\n        '&:hover': {\n          backgroundColor: '#6666ff'\n        }\n      }\n  })\n);\n\nexport const TodoList: VFC = () => {\n    const classes = useStyles();\n\n    //ダイアログ開閉管理\n    const [open, setOpen] = useState(false)\n\n    const tasks = useRecoilValue(TasksList)\n\n    const handleOpen = () => setOpen(true)\n    const handleClose = () => setOpen(false)\n\n    return (\n        <>\n            <Box padding='2rem' textAlign='center'>\n                {\n                    tasks.length !== 0 ? (\n                        <>\n                            <TodoTable />\n                            <Fab\n                                className={classes.fab}\n                                onClick={handleOpen}\n                                color=\"primary\"\n                                aria-label=\"add\"\n                            >\n                                <AddIcon />\n                            </Fab>\n                        </>\n                    ) : (\n                        <>\n                            <Typography variant=\"subtitle1\" gutterBottom>\n                                まだ登録されたタスクはありません。\n                            </Typography>\n                            <Button\n                                onClick={handleOpen}\n                                className={classes.button}\n                                variant=\"contained\"\n                                color=\"primary\"\n                            >\n                                タスクを登録する\n                            </Button>\n                        </>\n                    )\n                }\n            </Box>\n            <RegisterDialog open={open} onClose={handleClose}/>\n        </>\n    )\n}","import React from 'react';\n\nimport { DialogContent } from '@material-ui/core';\nimport { RecoilRoot } from 'recoil';\n\nimport { TodoAppHeader } from './components/TodoAppHeader';\nimport { TodoList } from './components/TodoList';\n\nfunction App() {\n  return (\n    <RecoilRoot>\n      <DialogContent>\n        <TodoAppHeader />\n        <TodoList />\n      </DialogContent>\n    </RecoilRoot>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}